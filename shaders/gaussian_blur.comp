#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(constant_id = 0) const int blurdirection = 0;

//-----------------------------------------------------------------------------
// [SECTION] bind group 0
//-----------------------------------------------------------------------------

layout (set = 0, binding = 0, rgba16f) uniform image2D inputImage;


//-----------------------------------------------------------------------------
// [SECTION] entry
//-----------------------------------------------------------------------------

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main() 
{
    const int iXCoord = int(gl_WorkGroupID.x * 8 + gl_LocalInvocationID.x);
    const int iYCoord = int(gl_WorkGroupID.y * 8 + gl_LocalInvocationID.y);

    float blurScale = 1.0;
    float blurStrength = 1.5;

	float weight[5];
	weight[0] = 0.227027;
	weight[1] = 0.1945946;
	weight[2] = 0.1216216;
	weight[3] = 0.054054;
	weight[4] = 0.016216;

    vec2 inputImageSize = imageSize(inputImage);
    ivec2 tOrigin = ivec2(iXCoord, iYCoord);
    if(float(tOrigin.x) + blurScale > inputImageSize.x)
        return;
    if(float(tOrigin.x) - blurScale < 0)
        return;
    if(float(tOrigin.y) + blurScale > inputImageSize.y)
        return;
    if(float(tOrigin.y) - blurScale < 0)
        return;

    vec4 outColor = vec4(0);
	vec3 result = imageLoad(inputImage, ivec2(iXCoord, iYCoord)).rgb * weight[0]; // current fragment's contribution
	for(int i = 1; i < 5; ++i)
	{
		if (blurdirection == 1)
		{
			// H
			result += imageLoad(inputImage, tOrigin + ivec2(blurScale * i, 0.0)).rgb * weight[i] * blurStrength;
			result += imageLoad(inputImage, tOrigin - ivec2(blurScale * i, 0.0)).rgb * weight[i] * blurStrength;
		}
		else
		{
			// V
			result += imageLoad(inputImage, tOrigin + ivec2(0.0, blurScale * i)).rgb * weight[i] * blurStrength;
			result += imageLoad(inputImage, tOrigin - ivec2(0.0, blurScale * i)).rgb * weight[i] * blurStrength;
		}
	}
	outColor = vec4(result, 1.0);

    imageStore(inputImage, tOrigin, outColor);
}