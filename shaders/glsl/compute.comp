#version 450

layout(std140, set = 0, binding = 0) uniform _tInfoBuffer
{
	uint uRowStride;
} tInfoBuffer;

layout(std140, set = 0, binding = 1) readonly buffer _tInputBuffer
{
	vec4 atPixelData[];
} tInputBuffer;

layout(std140, set = 0, binding = 2) buffer _tOutputBuffer
{
	vec4 atPixelData[];
} tOutputBuffer;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const bool bSwitchChannels = false;

void main() 
{
    const uint row_stride = tInfoBuffer.uRowStride;
	uint pixel_x = gl_GlobalInvocationID.x;
	uint pixel_y = gl_GlobalInvocationID.y;

    if(bSwitchChannels)
    {
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].r = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].r;
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].g = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].b;
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].b = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].g;
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].a = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].a;
    }
    else
    {
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].r = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].r;
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].g = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].g;
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].b = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].b;
        tOutputBuffer.atPixelData[pixel_x + pixel_y * row_stride].a = tInputBuffer.atPixelData[pixel_x + pixel_y * row_stride].a;
    }
}