#version 450

#define M_PI 3.1415926535897932384626433832795

layout(std140, set = 0, binding = 0) readonly buffer _tBufferIn
{
    vec4 atPixelData[];
} tBufferIn;

layout(std140, set = 0, binding = 1) buffer _tBufferOut0{ vec4 atPixelData[]; } FaceOut_0;
layout(std140, set = 0, binding = 2) buffer _tBufferOut1{ vec4 atPixelData[]; } FaceOut_1;
layout(std140, set = 0, binding = 3) buffer _tBufferOut2{ vec4 atPixelData[]; } FaceOut_2;
layout(std140, set = 0, binding = 4) buffer _tBufferOut3{ vec4 atPixelData[]; } FaceOut_3;
layout(std140, set = 0, binding = 5) buffer _tBufferOut4{ vec4 atPixelData[]; } FaceOut_4;
layout(std140, set = 0, binding = 6) buffer _tBufferOut5{ vec4 atPixelData[]; } FaceOut_5;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 3) in;

layout(constant_id = 0) const int resolution = 0;
layout(constant_id = 1) const int width = 0;
layout(constant_id = 2) const int height = 0;

vec3 uvToXYZ(int face, vec2 uv)
{
    if (face == 0) // right
    return vec3(1.f, -uv.y, -uv.x);

    else if (face == 1) // left
    return vec3(-1.f, -uv.y, uv.x);

    else if (face == 2) // top
    return vec3(uv.x, 1.f, +uv.y);

    else if (face == 3) // bottom
    return vec3(uv.x, -1.f, -uv.y);

    else if (face == 4) // front
    return vec3(uv.x, -uv.y, 1.f);

    else //if(face == 5)
    return vec3(-uv.x, -uv.y, -1.f);
}

vec2 dirToUV(vec3 dir)
{
    return vec2(
    0.5f + 0.5f * atan(dir.z, dir.x) / M_PI,
    1.f - acos(dir.y) / M_PI);
}

void writeFace(int pixel, int face, vec3 colorIn)
{
    vec4 color = vec4(colorIn.rgb, 1.0f);

    if (face == 0)
    FaceOut_0.atPixelData[pixel] = color;
    else if (face == 1)
    FaceOut_1.atPixelData[pixel] = color;
    else if (face == 2)
    FaceOut_2.atPixelData[pixel] = color;
    else if (face == 3)
    FaceOut_3.atPixelData[pixel] = color;
    else if (face == 4)
    FaceOut_4.atPixelData[pixel] = color;
    else //if(face == 5)
    FaceOut_5.atPixelData[pixel] = color;
}

void main()
{
    const float xcoord = gl_WorkGroupID.x*16 + gl_LocalInvocationID.x;
    const float ycoord = gl_WorkGroupID.y*16 + gl_LocalInvocationID.y;
    const int face = int(gl_WorkGroupID.z * 3 + gl_LocalInvocationID.z);
    const float xinc = 1.0 / resolution;
    const float yinc = 1.0 / resolution;
    const vec2 inUV = vec2(xcoord * xinc, ycoord * yinc);
    const int currentPixel = int(xcoord + ycoord * resolution);

    vec2 texCoordNew = inUV * 2.0 - 1.0;
    vec3 scan = uvToXYZ(face, texCoordNew);
    vec3 direction = normalize(scan);
    vec2 src = dirToUV(direction);

    int columnindex = int(width - floor(src.x * width));
    int rowindex = int(height - floor(src.y * height));

    int srcpixelIndex = columnindex + rowindex * width;

    vec3 color = vec3(tBufferIn.atPixelData[srcpixelIndex].r, tBufferIn.atPixelData[srcpixelIndex].g, tBufferIn.atPixelData[srcpixelIndex].b);
    writeFace(currentPixel, face, color);
}
