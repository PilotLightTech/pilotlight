#!/bin/bash

# Auto Generated by:
# "pl_build.py" version: 0.12.0 

################################################################################
#                              Development Setup                               #
################################################################################

# colors
BOLD=$'\e[0;1m'
RED=$'\e[0;31m'
RED_BG=$'\e[0;41m'
GREEN=$'\e[0;32m'
GREEN_BG=$'\e[0;42m'
CYAN=$'\e[0;36m'
MAGENTA=$'\e[0;35m'
YELLOW=$'\e[0;33m'
WHITE=$'\e[0;97m'
NC=$'\e[0m'

# find directory of this script
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

# make script directory CWD
pushd $DIR >/dev/null

# default configuration
PL_CONFIG=debug

# check command line args for configuration
while getopts ":c:" option; do
   case $option in
   c) # set conf
         PL_CONFIG=$OPTARG;;
     \?) # Invalid option
         echo "Error: Invalid option"
         exit;;
   esac
done

################################################################################
#                            configuration | debug                             #
################################################################################

if [[ "$PL_CONFIG" == "debug" ]]; then

# check if this is a reload
PL_HOT_RELOAD_STATUS=0

# let user know if hot reloading
if pidof -x "pilot_light" -o $$ >/dev/null;then
PL_HOT_RELOAD_STATUS=1
echo
echo ${BOLD}${WHITE}${RED_BG}--------${GREEN_BG} HOT RELOADING ${RED_BG}--------${NC}
echo
else
# cleanup binaries if not hot reloading
    PL_HOT_RELOAD_STATUS=0
    rm -f ./../out/pilotlight.a
    rm -f ./../out/pl_rect_pack_ext.so
    rm -f ./../out/pl_rect_pack_ext_*.so
    rm -f ./../out/pl_draw_ext.so
    rm -f ./../out/pl_draw_ext_*.so
    rm -f ./../out/pl_debug_ext.so
    rm -f ./../out/pl_debug_ext_*.so
    rm -f ./../out/pl_image_ext.so
    rm -f ./../out/pl_image_ext_*.so
    rm -f ./../out/pl_stats_ext.so
    rm -f ./../out/pl_stats_ext_*.so
    rm -f ./../out/pl_job_ext.so
    rm -f ./../out/pl_job_ext_*.so
    rm -f ./../out/pl_model_loader_ext.so
    rm -f ./../out/pl_model_loader_ext_*.so
    rm -f ./../out/pl_ecs_ext.so
    rm -f ./../out/pl_ecs_ext_*.so
    rm -f ./../out/pl_resource_ext.so
    rm -f ./../out/pl_resource_ext_*.so
    rm -f ./../out/pl_gpu_allocators_ext.so
    rm -f ./../out/pl_gpu_allocators_ext_*.so
    rm -f ./../out/pl_ui_ext.so
    rm -f ./../out/pl_ui_ext_*.so
    rm -f ./../out/pl_ref_renderer_ext.so
    rm -f ./../out/pl_ref_renderer_ext_*.so
    rm -f ./../out/pl_graphics_ext.so
    rm -f ./../out/pl_graphics_ext_*.so
    rm -f ./../out/pl_shader_ext.so
    rm -f ./../out/pl_shader_ext_*.so
    rm -f ./../out/pl_script_camera.so
    rm -f ./../out/pl_script_camera_*.so
    rm -f ./../out/editor.so
    rm -f ./../out/editor_*.so
    rm -f ./../out/app.so
    rm -f ./../out/app_*.so
    rm -f ./../out/pilot_light
fi

################################################################################
#                            debug | pilotlight_lib                            #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-DPL_VULKAN_BACKEND -D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# run compiler only
echo
echo ${YELLOW}Step: pilotlight_lib${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling...${NC}

# each file must be compiled separately
gcc -c -fPIC $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS pilotlight_lib.c -o "./../out/pilotlight_lib.o"

# combine object files into a static lib
ar rcs ./../out/pilotlight.a ./../out/*.o
rm ./../out/*.o

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                           debug | pl_rect_pack_ext                           #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_rect_pack_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_rect_pack_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_rect_pack_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                             debug | pl_draw_ext                              #
################################################################################

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_draw_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_draw_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_draw_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

################################################################################
#                             debug | pl_debug_ext                             #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_debug_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_debug_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_debug_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                             debug | pl_image_ext                             #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_image_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_image_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_image_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                             debug | pl_stats_ext                             #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_stats_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_stats_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_stats_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                              debug | pl_job_ext                              #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_job_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_job_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_job_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                         debug | pl_model_loader_ext                          #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_model_loader_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_model_loader_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_model_loader_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                              debug | pl_ecs_ext                              #
################################################################################

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_ecs_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_ecs_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_ecs_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

################################################################################
#                           debug | pl_resource_ext                            #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_resource_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_resource_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_resource_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                        debug | pl_gpu_allocators_ext                         #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_gpu_allocators_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_gpu_allocators_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_gpu_allocators_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                              debug | pl_ui_ext                               #
################################################################################

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_ui_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_ui_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_ui_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

################################################################################
#                         debug | pl_ref_renderer_ext                          #
################################################################################

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS -DPL_VULKAN_BACKEND "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_ref_renderer_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_ref_renderer_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_ref_renderer_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

################################################################################
#                          debug | pl_graphics_vulkan                          #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS -DPL_VULKAN_BACKEND "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_graphics_vulkan.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_graphics_vulkan${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_graphics_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                            debug | pl_shader_ext                             #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lshaderc_shared -lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_shader_ext.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_shader_ext${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_shader_ext.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                           debug | pl_script_camera                           #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../extensions/pl_script_camera.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: pl_script_camera${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pl_script_camera.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                                debug | editor                                #
################################################################################

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-DPL_VULKAN_BACKEND -D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../editor/editor.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: editor${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/editor.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

################################################################################
#                                 debug | app                                  #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-DPL_VULKAN_BACKEND -D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

# source files
PL_SOURCES="../editor/app.c ../out/pilotlight.a "

# run compiler (and linker)
echo
echo ${YELLOW}Step: app${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -shared -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/app.so"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

################################################################################
#                             debug | pilot_light                              #
################################################################################

# skip during hot reload
if [ $PL_HOT_RELOAD_STATUS -ne 1 ]; then 

# create output directory
if ! [[ -d "../out" ]]; then
    mkdir "../out"
fi

# create lock file
echo LOCKING > "./../out/lock.tmp"

# preprocessor defines
PL_DEFINES="-DPL_VULKAN_BACKEND -D_USE_MATH_DEFINES -DPL_PROFILING_ON -DPL_ALLOW_HOT_RELOAD -DPL_ENABLE_VALIDATION_LAYERS "

# includes directories
PL_INCLUDE_DIRECTORIES="-I../editor -I../src -I../libs -I../extensions -I../out -I../dependencies/stb -I../dependencies/cgltf -I$VULKAN_SDK/include -I/usr/include/vulkan "

# link directories
PL_LINK_DIRECTORIES="-L../out -L/usr/lib/x86_64-linux-gnu -L$VULKAN_SDK/lib "

# compiler flags
PL_COMPILER_FLAGS="-std=gnu11 --debug -g "

# linker flags
PL_LINKER_FLAGS="-ldl -lm "

# libraries
PL_LINK_LIBRARIES="-lxcb -lX11 -lX11-xcb -lxkbcommon -lxcb-cursor -lxcb-xfixes -lxcb-keysyms -lpthread -lvulkan "

# default compilation result
PL_RESULT=${BOLD}${GREEN}Successful.${NC}

PL_SOURCES=
PL_SOURCES+=" pl_main_x11.c"

# run compiler (and linker)
echo
echo ${YELLOW}Step: pilot_light${NC}
echo ${YELLOW}~~~~~~~~~~~~~~~~~~~${NC}
echo ${CYAN}Compiling and Linking...${NC}
gcc -fPIC $PL_SOURCES $PL_INCLUDE_DIRECTORIES $PL_DEFINES $PL_COMPILER_FLAGS $PL_INCLUDE_DIRECTORIES $PL_LINK_DIRECTORIES $PL_LINKER_FLAGS $PL_LINK_LIBRARIES -o "./../out/pilot_light"

# check build status
if [ $? -ne 0 ]
then
    PL_RESULT=${BOLD}${RED}Failed.${NC}
fi

# print results
echo ${CYAN}Results: ${NC} ${PL_RESULT}
echo ${CYAN}~~~~~~~~~~~~~~~~~~~~~~${NC}

# remove lock file
rm "./../out/lock.tmp"

fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# end of debug 
fi

# return CWD to previous CWD
popd >/dev/null